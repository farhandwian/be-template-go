package controllertest

import (
	"encoding/json"
	"errors"
	"iam/controller"
	"iam/gateway"
	"iam/model"
	"iam/usecase"
	"net/http"
	"net/http/httptest"
	"shared/helper"
	"shared/middleware"
	"testing"

	"github.com/joho/godotenv"
)

func TestPasswordResetRequestIntegration(t *testing.T) {
	err := godotenv.Load("../.env")
	if err != nil {
		t.Fatalf("Error loading .env file: %v", err)
	}

	accessToken := NewAccessToken(model.NewUserAccessAdmin())

	testCases := []struct {
		name           string
		userID         string
		expectedStatus int
		mux            *http.ServeMux
	}{
		{
			name:           "Valid Password Reset Request",
			userID:         "valid-user-id",
			expectedStatus: http.StatusOK,
			mux: PasswordResetRequestDependency(
				MockGateway(func(req gateway.GenerateJWTReq) (*gateway.GenerateJWTRes, error) {
					return &gateway.GenerateJWTRes{JWTToken: "valid-jwt-token"}, nil
				}),
				MockGateway(func(req gateway.SendEmailReq) (*gateway.SendEmailRes, error) {
					return &gateway.SendEmailRes{}, nil
				}),
				MockGateway(func(req gateway.UserGetOneByIDReq) (*gateway.UserGetOneByIDRes, error) {
					return &gateway.UserGetOneByIDRes{
						User: model.User{
							ID:    "valid-user-id",
							Email: "user@example.com",
						},
					}, nil
				}),
			),
		},
		{
			name:           "User Not Found",
			userID:         "non-existent-user-id",
			expectedStatus: http.StatusBadRequest,
			mux: PasswordResetRequestDependency(
				MockGateway(func(req gateway.GenerateJWTReq) (*gateway.GenerateJWTRes, error) {
					return nil, nil
				}),
				MockGateway(func(req gateway.SendEmailReq) (*gateway.SendEmailRes, error) {
					return nil, nil
				}),
				MockGateway(func(req gateway.UserGetOneByIDReq) (*gateway.UserGetOneByIDRes, error) {
					return nil, errors.New("user not found")
				}),
			),
		},
		// {
		// 	name:           "JWT Generation Failure",
		// 	userID:         "valid-user-id",
		// 	expectedStatus: http.StatusInternalServerError,
		// 	mux: PasswordResetRequestDependency(
		// 		MockGateway(func(req gateway.GenerateJWTReq) (*gateway.GenerateJWTRes, error) {
		// 			return nil, errors.New("JWT generation failed")
		// 		}),
		// 		MockGateway(func(req gateway.SendEmailReq) (*gateway.SendEmailRes, error) {
		// 			return nil, nil
		// 		}),
		// 		MockGateway(func(req gateway.UserGetOneByIDReq) (*gateway.UserGetOneByIDRes, error) {
		// 			return &gateway.UserGetOneByIDRes{
		// 				User: model.User{
		// 					ID:    "valid-user-id",
		// 					Email: "user@example.com",
		// 				},
		// 			}, nil
		// 		}),
		// 	),
		// },
		// {
		// 	name:           "Email Sending Failure",
		// 	userID:         "valid-user-id",
		// 	expectedStatus: http.StatusInternalServerError,
		// 	mux: PasswordResetRequestDependency(
		// 		MockGateway(func(req gateway.GenerateJWTReq) (*gateway.GenerateJWTRes, error) {
		// 			return &gateway.GenerateJWTRes{JWTToken: "valid-jwt-token"}, nil
		// 		}),
		// 		MockGateway(func(req gateway.SendEmailReq) (*gateway.SendEmailRes, error) {
		// 			return nil, errors.New("failed to send email")
		// 		}),
		// 		MockGateway(func(req gateway.UserGetOneByIDReq) (*gateway.UserGetOneByIDRes, error) {
		// 			return &gateway.UserGetOneByIDRes{
		// 				User: model.User{
		// 					ID:    "valid-user-id",
		// 					Email: "user@example.com",
		// 				},
		// 			}, nil
		// 		}),
		// 	),
		// },
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			req := httptest.NewRequest("POST", "/user/"+tc.userID+"/password/reset/request", nil)
			req.Header.Set("Content-Type", "application/json")
			req.Header.Set("Authorization", "Bearer "+accessToken)

			rr := httptest.NewRecorder()

			tc.mux.ServeHTTP(rr, req)

			if rr.Code != tc.expectedStatus {
				t.Errorf("Expected status %d, got %d", tc.expectedStatus, rr.Code)
			}

			if tc.expectedStatus == http.StatusOK {
				var response struct{}
				if err := json.NewDecoder(rr.Body).Decode(&response); err != nil {
					t.Errorf("Failed to decode response body: %v", err)
				}
			}
		})
	}
}

func PasswordResetRequestDependency(
	generateJWT gateway.GenerateJWT,
	sendEmail gateway.SendEmail,
	userGetOneByID gateway.UserGetOneByID,
) *http.ServeMux {
	mux := http.NewServeMux()

	generateJWTWithLogging := middleware.Logging(generateJWT, 4)
	sendEmailWithLogging := middleware.Logging(sendEmail, 4)
	userGetOneByIDWithLogging := middleware.Logging(userGetOneByID, 4)

	passwordResetRequestUseCase := usecase.ImplPasswordResetRequest(
		generateJWTWithLogging,
		sendEmailWithLogging,
		userGetOneByIDWithLogging,
	)

	passwordResetRequestUseCaseWithLogging := middleware.Logging(passwordResetRequestUseCase, 0)

	mockJWTToken, _ := helper.NewJWTTokenizer("mock-secret-key")

	c := controller.Controller{
		Mux: mux,
		JWT: mockJWTToken,
	}

	helper.NewApiPrinter().
		Add(c.PasswordResetRequestHandler(passwordResetRequestUseCaseWithLogging)).
		Print()

	return mux
}
